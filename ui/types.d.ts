// Copyright (c) 2020 Leedehai. All rights reserved.
// Use of this source code is governed under the MIT LICENSE.txt file.
// -----
// Typesheds to facilitate cross-file type detections without importing.
// The JS files are linked together in index.html using the old-school
// <script> tag. Q: why not use ES6 "import" statements? A: using "import"
// requires the files to be served with a server (see README.md).

/**
 * Store data in native JS data structures. Why not IndexedDB etc.: see comments
 * in the generator script.
 */
declare class DataStorage {
  readonly testTitle: string;
  readonly masterLog: string;
  readonly testExecPath: string;
  readonly testExecPathComponents: string[];
  readonly startTime: number;  // Unix epoch, msec
  readonly endTime: number;  // Unix epoch, msec
  readonly wholeTime: number;  // Time duration, msec
  readonly masterLogModificationTime: string;  // Human-friendly time string
  readonly taskErrorCount: number;  // Errors, regardless of flakiness
  readonly testErrorCount: number;
  readonly additionalInfo: string[];  // Additional information to show
  // If a test is repeated k times, there will be k tasks. A task is the unit
  // of execution, and its result is n TestAggregateInfo (see below).
  readonly taskResults: TaskInfoStringified[];
  readonly testData: Map<string, TestAggregateInfo>;
}

/**
 * The data structure holding data generated by the test runner.
 */
declare var dataStorage: DataStorage;

/**
 * Data that conceptually belong to a test.
 * If a test is repeated k times, then there are k tasks corresponding to it.
 */
declare class TestAggregateInfo {
  readonly taskIndexes: number[];  // Indexes to get tasks from taskResults
  readonly command: string;  // Formatted command string
  readonly taskErrorCount: number;  // Number of tasks that has errors
  readonly timeout: number;  // Max runtime allowed for each task
  readonly runtimeStat: [number, number];  // Tasks runtime (ms) avg and stddev
  readonly maxrssStat: [number, number];  // Tasks max RSS (KB) avg and stddev
  readonly exit: [string, number];  // Expected type, numeric representation
  readonly goldenFile: string|null;  // File to check a task's stdout against.
  readonly ok: boolean;  // Whether all tasks are ok (i.e. taskErrorCount is 0)
}

/**
 * Data that conceptually belong to an individual task.
 * If a test is repeated k times, then there are k tasks corresponding to it.
 */
declare class TaskInfo {
  readonly ok: boolean;
  readonly timesMs: [number, number, number];  // proc, abs start, abs end (ms)
  readonly maxrssKb: number;  // KB
  readonly exit: [boolean, string, number];  // ok, ctual type, repr
  readonly stdout: [boolean, string, string|null];  // ok, actualFile, diffFile
}

/**
 * We don't store TaskInfo directly, because parsing the entire array of them
 * takes time, and it is unnecessary. Instead, we store the string version, and
 * parse the strings with JSON.parse() as needed.
 * There's no need to compress them, because data is retrieved locally. If not,
 * it's better to compress the whole set of asset files, not just these strings.
 */
declare type TaskInfoStringified = string;

interface Window {
  uiState: UIState;  // In persistent_states.js.
  dataState: DataState;  // In persistent_states.js.
  singletonTooltip: HTMLElement;  // In utils.js.
}
